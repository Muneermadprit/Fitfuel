// @ts-nocheck
const{db:db}=require("./firebase_config"),{collection:collection,getDocs:getDocs,addDoc:addDoc}=require("firebase/firestore"),SECRET_KEY="your_jwt_secret_key",verifyToken=(e,s,r)=>{const t=e.headers.authorization;if(!t)return s.status(401).json({message:"No token provided"});jwt.verify(t,SECRET_KEY,((t,a)=>{if(t)return s.status(401).json({message:"Failed to authenticate token"});e.user=a,r()}))},generateToken=(e,s)=>{const r={userId:e,email:s};return jwt.sign(r,SECRET_KEY,{expiresIn:"1h"})},getUsers=async(e,s)=>{try{const e=collection(db,"users"),r=(await getDocs(e)).docs.map((e=>({id:e.id,...e.data()})));s.status(200).json(r)}catch(e){console.error("Error getting users:",e),s.status(500).json({message:"Error fetching users"})}},createUser=async(e,s)=>{try{const{name:r,email:t,age:a}=e.body;if(!r||!t||!a)return s.status(400).json({message:"Name, email, and age are required"});const o={name:r,email:t,age:a,createdAt:new Date},n=collection(db,"users"),c=await addDoc(n,o),i=generateToken(c.id,t);s.status(201).json({message:"User created",id:c.id,token:i})}catch(e){console.error("Error adding user:",e),s.status(500).json({message:"Error creating user"})}};module.exports={getUsers:[verifyToken,getUsers],createUser:createUser,generateToken:generateToken};